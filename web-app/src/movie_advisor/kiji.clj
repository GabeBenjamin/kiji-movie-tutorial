(ns movie-advisor.kiji
  (:require [taoensso.timbre :as timbre])
  (:import (org.kiji.schema Kiji Kiji$Factory KijiURI KijiDataRequest)
           (org.kiji.scoring FreshKijiTableReader$Builder)
           (org.kiji.tutorial.avro MovieRating)))

(defn open-kiji-instance []
  (let [kiji-uri (.build (KijiURI/newBuilder "kiji://localhost:2181/tutorial"))
        kiji (Kiji$Factory/open kiji-uri)]
    kiji))

(defn init
  "Connect to Kiji instance "
  []
  (timbre/info "Initializing Kiji connection!")
  ; Put this into a separate function so that we can override it easily during testing.
  (def kiji (open-kiji-instance))
  (timbre/info "Got reference to Kiji instance.")
  (def users-table (.openTable kiji "users"))
  (timbre/info "Got reference to users table.")
  (def movies-table (.openTable kiji "movies"))
  (timbre/info "Got reference to movies table.")
  (def fresh-kiji-table-reader (-> (FreshKijiTableReader$Builder/create)
                                    (.withTable users-table)
                                    ; Make this a really huge timeout!
                                    (.withTimeout 5000)
                                    (.build)))
  (def users-table-reader (.openTableReader users-table))
  (def movies-table-reader (.openTableReader movies-table))
)

(defn get-entity-id
  "Return the entity ID given a table and user / movie ID"
  [kiji-table movie-or-user-id]
  (.getEntityId kiji-table (to-array [(.toString movie-or-user-id)])))

(defn get-top-N-movies-for-user-as-id
  "Connect to Kiji and read back the recommended movies!  Return a list of show
  IDs, sorted from most- to least-highly recommended."
  [userid]
  (let [; Calling a Java varargs method from Clojure requires passing in an array
        entity-id (get-entity-id users-table userid)
        data-request (KijiDataRequest/create "recommendations" "foo")
        ; Get a MovieRecommendations object
        kiji-result (.get fresh-kiji-table-reader entity-id data-request)
        movie-recs (.getMostRecentValue kiji-result "recommendations" "foo")]
    ; For now, get only the show IDs
    (timbre/info "User id is " userid)
    (timbre/info "Entity ID is " entity-id)
    (timbre/info "Finished getting most recent value back from FreshKijiTableReader")
    (timbre/info "Kiji result is " kiji-result)
    (timbre/info "Got back value " movie-recs)
    (map #(.getShowId %) (.getRecommendations movie-recs))))

(defn get-top-N-movies-for-user-as-movie-info
  "Get the top N movies for a user (generated by Kiji score function),
  returning MovieInfo Avro records for each movie."
  [userid]
  (let [movie-ids (get-top-N-movies-for-user-as-id userid)]
    ; For every movie ID, do a read in Kiji to get the movie information.
    (map
      (fn [movie-id]
        (let [entity-id (get-entity-id movies-table movie-id)
              data-request (KijiDataRequest/create "info" "info")]
          (-> (.get movies-table-reader entity-id data-request) (.getMostRecentValue "info" "info"))))
      movie-ids)))

(defn get-movie-ratings
  "Get a map from movie ids to ratings (MovieRating) for this user. Values will
  be nil if the movie is not rated."
  [user-id movie-ids]
  ; TODO: Check that movie-id is an seq?
  (timbre/info "Getting movie ratings for user id " user-id " and movies " movie-ids)
  (let [entity-id (get-entity-id users-table user-id)]
    ; For every movie ID, do a read in Kiji to get the movie information.
    (into {} (map
      (fn [movie-id]
        (let [data-request (KijiDataRequest/create "ratings" (str movie-id))
              rating-or-nil (-> (.get users-table-reader entity-id data-request) (.getMostRecentValue "ratings" (str movie-id)))]
          (timbre/info "Rating for movie " movie-id " is " rating-or-nil)
          [movie-id rating-or-nil])
      ) movie-ids))
  ))

(defn get-user-info
  "Connect to Kiji and read back user information (Person Avro record)."
  [userid]
  (let [entity-id (get-entity-id users-table userid)
        data-request (KijiDataRequest/create "info" "info")
        user-info (-> (.get users-table-reader entity-id data-request) (.getMostRecentValue "info" "info"))]
    ; "user-info" is of type "Person"
    user-info))

(defn get-movie-info
  "Connect to Kiji and read back movie information (MovieInfo Avro record)."
  [movieid]
  (let [entity-id (get-entity-id movies-table movieid)
        data-request (KijiDataRequest/create "info" "info")
        movie-info (-> (.get movies-table-reader entity-id data-request) (.getMostRecentValue "info" "info"))]
    ; "movie-info" is of type "MovieInfo"
    movie-info))


(defn get-most-similar-movies
  "Return vector of similar movies (sorted by similarity).  Each movie is an
  ItemSimilarityScore Avro record."
  [movieid]
  (let [entity-id (get-entity-id movies-table movieid)
        data-request (KijiDataRequest/create "most_similar" "most_similar")
        most-similar (-> (.get movies-table-reader entity-id data-request) (.getMostRecentValue "most_similar" "most_similar"))]
    ; TODO: Assert not null
    ; Turn into a list
    (.getSimilarities most-similar)))

(defn delete-rating
  "Delete the rating for this movie by this user."
  [user-id movie-id]
  (let [table-writer (.openTableWriter users-table)
        entity-id (get-entity-id users-table user-id)]
    (.deleteColumn table-writer entity-id "ratings" (str movie-id))))

(defn rate-movie
  "Insert a rating for this movie by this user."
  [user-id movie-id rating]
  (let [table-writer (.openTableWriter users-table)
        entity-id (get-entity-id users-table user-id)
        movie-rating (MovieRating. (Long/parseLong movie-id) (Integer/parseInt rating) (System/currentTimeMillis))]
    (.put table-writer entity-id "ratings" (str movie-id) movie-rating)))
